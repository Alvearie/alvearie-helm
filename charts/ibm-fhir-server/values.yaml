# Default values for chart.

# -- Optional override for the fully qualified name of the created kube resources
fullnameOverride:
# -- Optional override for chart name portion of the created kube resources
nameOverride:

# -- Extra labels to apply to the created kube resources
extraLabels: {}

# -- The number of replicas for the externally-facing FHIR server pods
replicaCount: 2
image:
  repository: ibmcom/ibm-fhir-server
  # @default -- {{ .Chart.AppVersion }}
  tag:
  pullPolicy: Always
imagePullSecrets: []
# -- The trace specification to use for selectively tracing components of the IBM FHIR Server.
# The log detail level specification is in the following format: `component1=level1:component2=level2`
# See https://openliberty.io/docs/latest/log-trace-configuration.html for more information.
traceSpec: "*=info"
# -- Set to true to restrict the API to a particular set of resource type endpoints
restrictEndpoints: false
# -- Control which interactions are supported for which resource type endpoints
# @default -- A single entry for resourceType "Resource" that applies to all resource types
endpoints:
  # yamllint disable-line rule:comments
  - # -- A valid FHIR resource type; use "Resource" for whole-system behavior
    resourceType: Resource
    # -- (list) Valid _include arguments while searching this resource type; nil means no restrictions
    searchIncludes:
    # -- (list) Valid _revInclude arguments while searching this resource type; nil means no restrictions
    searchRevIncludes:
    # -- (list) Instances of this type must claim conformance to at least one of the listed profiles; nil means no profile conformance required
    profiles:
    # -- A mapping from enabled search parameter codes to search parameter definitions
    searchParameters:
      - code: "*"
        url: "*"
    # -- The set of enabled interactions for this resource type:
    # [create, read, vread, history, search, update, patch, delete]
    # @default -- All interactions.
    interactions:
      - create
      - read
      - vread
      - history
      - search
      - update
      - patch
      - delete

# see <https://github.com/bitnami/charts/tree/master/bitnami/postgresql> for details
postgresql:
  # -- enable an included PostgreSQL DB.
  # if set to `false`, the connection settings under the `db` key are used
  enabled: true
  image:
    # -- the tag for the postgresql image
    tag: 13.5.0
  # -- name of the database to create.
  # see: <https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run>
  postgresqlDatabase: "fhir"
  # -- Name of existing secret to use for PostgreSQL passwords.
  # The secret must contain the keys `postgresql-password`
  # (the password for `postgresqlUsername` when it is different from `postgres`),
  # `postgresql-postgres-password` (which will override `postgresqlPassword`),
  # `postgresql-replication-password` (which will override `replication.password`), and
  # `postgresql-ldap-password` (used to authenticate on LDAP).
  # The value is evaluated as a template.
  existingSecret: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  # -- Extended Runtime Config Parameters (appended to main or default configuration)
  postgresqlExtendedConf:
    # override the default value of 0 to support bulk import and export
    maxPreparedTransactions: 24

db:
  type: postgresql
  host: postgres
  port: 5432
  enableTls: false
  certPath:
  name: postgres
  user: postgres
  # -- The name of a Secret from which to retrieve database information.
  # If this value is set, it is expected that passwordSecretKey and/or apiKeySecretKey will also be set.
  dbSecret: postgres
  # -- For the Secret specified in dbSecret, the key of the key/value pair containing the password.
  # This value will be ignored if the dbSecret value is not set.
  passwordSecretKey: postgresql-password
  # -- For the Secret specified in dbSecret, the key of the key/value pair containing the apiKey.
  # This value will be ignored if the dbSecret value is not set.
  apiKeySecretKey:
  # -- The database password. If dbSecret is set, the password will be set from its contents.
  password:
  # -- The database apiKey. If apiKeySecret is set, the apiKey will be set from its contents.
  apiKey:
  schema: fhirdata
  tenantKey:
  sslConnection: true
  pluginName:
  securityMechanism:

keycloak:
  enabled: false
  image:
    repository: alvearie/smart-keycloak
    tag: 0.3.0
  # -- An initial keycloak admin username for creating the initial Keycloak admin user
  adminUsername: admin
  # -- An initial keycloak admin password for creating the initial Keycloak admin user
  adminPassword: change-password
  # -- Extra volumes for the Keycloak StatefulSets
  # @default -- a single volume named keycloak-admin with contents from the keycloak-admin-secret
  extraVolumes: |
    - name: keycloak-admin
      secret:
        secretName: {{ template "keycloak.fullname" $ }}-admin-secret
  # -- Extra volume mounts for the Keycloak StatefulSet
  # @default -- mount the keycloak-admin volume at /secrets/keycloak-admin
  extraVolumeMounts: |
    - name: keycloak-admin
      mountPath: /secrets/keycloak-admin
  # -- Extra environment variables for the Keycloak StatefulSet
  # @default -- DB_VENDOR set to postgres and KEYCLOAK_USER_FILE/KEYCLOAK_PASSWORD_FILE set to the keycloak-admin mountPath
  extraEnv: |
    - name: KEYCLOAK_USER_FILE
      value: /secrets/keycloak-admin/username
    - name: KEYCLOAK_PASSWORD_FILE
      value: /secrets/keycloak-admin/password
    - name: DB_VENDOR
      value: postgres
  postgresql:
    nameOverride: keycloak-postgres
  realms:
    test:
      clients:
        inferno:
          consentRequired: true
          publicClient: true
          redirectURIs:
            - "http://localhost:4567/inferno/*"
          defaultScopes: []
          # -- OAuth 2.0 scopes supported by this client
          # @default -- all scopes defined by the `security.oauth` configuration.
          optionalScopes:
        infernoBulk:
          consentRequired: true
          publicClient: true
          redirectURIs:
            - "http://localhost:4567/inferno/*"
          defaultScopes: []
          # -- OAuth 2.0 scopes supported by this client
          # @default -- all scopes defined by the `security.oauth` configuration.
          optionalScopes:

security:
  jwtValidation:
    enabled: false
    audience: https://{{ tpl $.Values.ingress.hostname $ }}/fhir-server/api/v4
    issuer: https://{{ tpl $.Values.ingress.hostname $ }}/auth/realms/test
    jwksUri: http://{{ template "keycloak.fullname" .Subcharts.keycloak }}-http/auth/realms/test/protocol/openid-connect/certs
    groupNameAttribute: group
    usersGroup: fhirUser
  oauth:
    enabled: false
    regUrl: https://{{ tpl $.Values.ingress.hostname $ }}/auth/realms/test/clients-registrations/openid-connect
    authUrl: https://{{ tpl $.Values.ingress.hostname $ }}/auth/realms/test/protocol/openid-connect/auth
    tokenUrl: https://{{ tpl $.Values.ingress.hostname $ }}/auth/realms/test/protocol/openid-connect/token
    profileScopeEnabled: true
    offlineAccessScopeEnabled: true
    onlineAccessScopeEnabled: true
    smart:
      enabled: false
      fhirUserScopeEnabled: true
      launchPatientScopeEnabled: true
      # -- SMART resource scopes to advertise from the server
      # @default -- read access to number of resource types.
      resourceScopes:
        - "patient/*.read"
        - "patient/AllergyIntolerance.read"
        - "patient/CarePlan.read"
        - "patient/CareTeam.read"
        - "patient/Condition.read"
        - "patient/Device.read"
        - "patient/DiagnosticReport.read"
        - "patient/DocumentReference.read"
        - "patient/Encounter.read"
        - "patient/ExplanationOfBenefit.read"
        - "patient/Goal.read"
        - "patient/Immunization.read"
        - "patient/Location.read"
        - "patient/Medication.read"
        - "patient/MedicationRequest.read"
        - "patient/MedicationDispense.read"
        - "patient/Observation.read"
        - "patient/Organization.read"
        - "patient/Patient.read"
        - "patient/Practitioner.read"
        - "patient/PractitionerRole.read"
        - "patient/Procedure.read"
        - "patient/Provenance.read"
        - "patient/RelatedPerson.read"
      # -- SMART capabilities to advertise from the server
      # @default -- sso-openid-connect, launch-standalone, client-public, client-confidential-symmetric, permission-offline, context-standalone-patient, and permission-patient
      capabilities:
        - "sso-openid-connect"
        - "launch-standalone"
        - "client-public"
        - "client-confidential-symmetric"
        - "permission-offline"
        - "context-standalone-patient"
        - "permission-patient"

schemaMigration:
  enabled: true
  image:
    repository: ibmcom/ibm-fhir-schematool
    # @default -- {{ .Chart.AppVersion }}
    tag:
    pullPolicy: Always
    pullSecret: all-icr-io
  # -- container resources for the schema migration job
  resources: {}
# -- The name of a Secret from which to retrieve fhirUserPassword and fhirAdminPassword.
# If this value is set, it is expected that fhirUserPasswordSecretKey and fhirAdminPasswordSecretKey will also be set.
fhirPasswordSecret:
# -- For the Secret specified in fhirPasswordSecret, the key of the key/value pair containing the fhirUserPassword.
# This value will be ignored if the fhirPasswordSecret value is not set.
fhirUserPasswordSecretKey:
# -- For the Secret specified in fhirPasswordSecret, the key of the key/value pair containing the fhirAdminPassword.
# This value will be ignored if the fhirPasswordSecret value is not set.
fhirAdminPasswordSecretKey:
# -- The fhirUserPassword. If fhirPasswordSecret is set, the fhirUserPassword will be set from its contents.
fhirUserPassword: change-password
# -- The fhirAdminPassword. If fhirPasswordSecret is set, the fhirAdminPassword will be set from its contents.
fhirAdminPassword: change-password
# -- Indicates whether the server registry resource provider should be used by the FHIR registry component to access definitional resources through the persistence layer
serverRegistryResourceProviderEnabled: false
audit:
  enabled: false
  kafkaServers:
  kafkaApiKey:
  kafka:
    bootstrapServers:
    securityProtocol: SASL_SSL
    saslMechanism: PLAIN
    saslJaasConfig:
    sslEnabledProtocols: TLSv1.2
    sslProtocol: TLSv1.2
    sslEndpointIdentificationAlgorithm: HTTPS
  # -- The target Kafka topic for audit events
  topic: FHIR_AUDIT_DEV
  # -- `cadf` or `auditevent`
  type: auditevent
  # -- The city where the server is running
  geoCity:
  # -- The state where the server is running
  geoState:
  # -- The country where the server is running
  geoCountry:
notifications:
  kafka:
    enabled: false
    topicName:
    bootstrapServers:
    securityProtocol: SASL_SSL
    saslMechanism: PLAIN
    saslJaasConfig:
    sslEnabledProtocols: TLSv1.2
    sslProtocol: TLSv1.2
    sslEndpointIdentificationAlgorithm: HTTPS
  nats:
    enabled: false
    cluster:
    channel:
    clientId:
    servers:
    useTLS: true
    truststoreLocation:
    truststorePassword:
    keystoreLocation:
    keystorePassword:
objectStorage:
  enabled: false
  # -- The name of a Secret from which to retrieve object storage information.
  # If this value is set, it is expected that locationSecretKey, endpointSecretKey, accessKeySecretKey, and secretKeySecretKey will also be set.
  objectStorageSecret:
  # -- For the Secret specified in objectStorageSecret, the key of the key/value pair containing the location.
  # This value will be ignored if the objectStorageSecret value is not set.
  locationSecretKey:
  # -- For the Secret specified in objectStorageSecret, the key of the key/value pair containing the endpoint URL.
  # This value will be ignored if the objectStorageSecret value is not set.
  endpointUrlSecretKey:
  # -- For the Secret specified in objectStorageSecret, the key of the key/value pair containing the access key.
  # This value will be ignored if the objectStorageSecret value is not set.
  accessKeySecretKey:
  # -- For the Secret specified in objectStorageSecret, the key of the key/value pair containing the secret key.
  # This value will be ignored if the objectStorageSecret value is not set.
  secretKeySecretKey:
  # -- The object storage location. If objectStorageSecret is set, the location will be set from its contents.
  location:
  # -- The object storage endpoint URL. If objectStorageSecret is set, the endpoint URL will be set from its contents.
  endpointUrl:
  # -- The object storage access key. If objectStorageSecret is set, the access key will be set from its contents.
  accessKey:
  # -- The object storage secret key. If objectStorageSecret is set, the secret key will be set from its contents.
  secretKey:
  # -- Bucket names must be globally unique
  bulkDataBucketName:
  batchIdEncryptionKey:
ingress:
  enabled: true
  annotations: {}
  # -- The default cluster hostname, used for both ingress.rules.host and ingress.tls.hosts.
  # If you have more than one, you'll need to set overrides for the rules and tls separately.
  hostname: "{{ .Release.Name }}.example.com"
  rules:
    - host: "{{ tpl $.Values.ingress.hostname $ }}"
      paths:
        - path: "/"
          pathType: Prefix
  servicePort: https
  tls:
    - secretName: ""
resources:
  requests:
    memory: "2Gi"
    ephemeral-storage: "1Gi"
  limits:
    memory: "5Gi"
    ephemeral-storage: "1Gi"
# -- Pod affinity
# @default -- Required node anti-affinity and preferred zone anti-affinity
affinity: |
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchLabels:
            {{- include "fhir.matchLabels" . | nindent 10 }}
        topologyKey: kubernetes.io/hostname
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchLabels:
              {{- include "fhir.matchLabels" . | nindent 12 }}
          topologyKey: failure-domain.beta.kubernetes.io/zone
# -- Topology spread constraints template
topologySpreadConstraints:
# -- Node labels for Pod assignment
nodeSelector: {}
# -- Node taints to tolerate
tolerations: []

minHeap: "1024m"
maxHeap: "4096m"
extraJvmOptions: ""
extraEnv: ""
# -- Add additional volumes. Evaluated as a template.
# Must evaluate to a valid yaml list of volumes.
extraVolumes: ""
# -- Add additional volume mounts. Evaluated as a template.
# Must evaluate to a valid yaml list of volume mounts.
extraVolumeMounts: ""

# -- Template containing the fhir-server-config.json content
fhirServerConfigTemplate: "defaultFhirServerConfig"

# -- Template containing the datasources.xml content
datasourcesTemplate: "defaultPostgresDatasources"

# -- Template containing the extension-search-parameters.json content
extensionSearchParametersTemplate: "defaultSearchParameters"

# -- Template with keycloak-config.json input for the Alvearie keycloak-config project
keycloakConfigTemplate: "defaultKeycloakConfig"

# -- Secret containing the FHIR server keystore file and its password.
# The secret must contain the keys ''fhirKeyStore' (the keystore file contents in the format specified
# in keyStoreFormat) and 'fhirKeyStorePassword' (the keystore password)
keyStoreSecret:
# -- For the keystore specified in keyStoreSecret, the keystore format (PKCS12 or JKS).
# This value will be ignored if the keyStoreSecret value is not set.
keyStoreFormat: PKCS12
# -- Secret containing the FHIR server truststore file and its password.
# The secret must contain the keys 'fhirTrustStore' (the truststore file contents in the format specified
# in trustStoreFormat) and 'fhirTrustStorePassword' (the truststore password)
trustStoreSecret:
# -- For the truststore specified in trustStoreSecret, the truststore format (PKCS12 or JKS).
# This value will be ignored if the trustStoreSecret value is not set.
trustStoreFormat: PKCS12

# -- if enabled, the server will listen to non-TLS requests
exposeHttpEndpoint: false
# -- The port on which the server will listen to non-TLS requests. Will be ignored if exposeHttpEndpoint is false.
exposeHttpPort: 9080

# -- security context for the server container
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001

# -- pod security context for the server
securityContext: {}
